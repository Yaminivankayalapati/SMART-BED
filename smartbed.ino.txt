#define BLYNK_TEMPLATE_ID "TMPL3RhBuMgQn"
#define BLYNK_TEMPLATE_NAME "smart bed"
#define BLYNK_AUTH_TOKEN "UbzFSw_M6LQXHUfreCtF5ioT_VqfoYA9"

#include <Wire.h>
#include "MAX30105.h"
#include "heartRate.h" // For BPM calculations
#include "spo2_algorithm.h" // Include SpO2 algorithm header
#include <WiFi.h>
#include <BlynkSimpleEsp32.h>

MAX30105 particleSensor;

const byte RATE_SIZE = 4;
byte rates[RATE_SIZE]; // Array of heart rates
byte rateSpot = 0;
long lastBeat = 0; // Time at which the last beat occurred
float beatsPerMinute;
int beatAvg;

uint32_t irBuffer[100]; // Buffer to store infrared LED sensor data
uint32_t redBuffer[100]; // Buffer to store red LED sensor data
int bufferLength = 100; // Length of buffer for SpO2 calculation
int32_t spo2; // SPO2 value
int8_t validSPO2; // Indicator to check if SPO2 calculation is valid
int32_t heartRate; // Calculated heart rate
int8_t validHeartRate; // Indicator to check if heart rate calculation is valid

// Gas sensor setup
const int gasSensorPin = 34; // Define the pin for the gas sensor

// Ultrasonic sensor setup
int trig = 12;
int echo = 14;

// Wi-Fi credentials
const char* ssid = "Devi priya";
const char* password = "neku enduku";
char auth[] = BLYNK_AUTH_TOKEN;

#define REPORTING_PERIOD_MS 1000
uint32_t tsLastReport = 0; 

void setup() {
  Serial.begin(115200);
  Serial.println("Initializing...");

  // Initialize MAX30105 sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) { // Use default I2C port, 400kHz speed
    Serial.println("MAX30105 was not found. Please check wiring/power.");
    while (1);
  }

  Serial.println("Place your index finger on the sensor with steady pressure.");
  particleSensor.setup(); // Configure sensor with default settings
  particleSensor.setPulseAmplitudeRed(0x1F); // Set Red LED for SpO2
  particleSensor.setPulseAmplitudeIR(0x1F); // Set IR LED for BPM

  // Set up WiFi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  Serial.println("Connecting to WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi Connected");

  // Set up Blynk
  Blynk.begin(auth, ssid, password);
  
  // Set up gas sensor
  pinMode(gasSensorPin, INPUT);
  
  // Set up ultrasonic sensor
  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);
}

void loop() {
  // Collect 100 samples of both IR and Red LED
  for (int i = 0; i < bufferLength; i++) {
    while (particleSensor.available() == false) // Wait for new data
      particleSensor.check();
      
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample(); // Move to next sample
  }

  // Calculate heart rate and SpO2
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  // Display results in Serial Monitor
  Serial.print("Heart Rate: ");
  if (validHeartRate) {
    Serial.print(heartRate);
  } else {
    Serial.print("Invalid");
  }
  
  Serial.print(" bpm, SpO2: ");
  if (validSPO2) {
    Serial.print(spo2);
  } else {
    Serial.print("Invalid");
  }
  Serial.println();

  // Read gas sensor value
  int gasValue = analogRead(gasSensorPin);
  Serial.print("Gas Sensor Value: ");
  Serial.println(gasValue);

  // Measure distance with ultrasonic sensor
  digitalWrite(trig, LOW);
  delayMicroseconds(2);
  digitalWrite(trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(trig, LOW);
  
  float duration = pulseIn(echo, HIGH);
  duration = duration / 2;
  float distance = (0.034) * duration; // Distance in cm
  Serial.print("Distance: ");
  Serial.println(distance);

  // Report to Blynk periodically
  if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
    // Send Heart Rate and SpO2 to Blynk
    if (validHeartRate) {
      Blynk.virtualWrite(V0, heartRate);   // Send Heart Rate to Virtual Pin 0
      // Log event if heart rate > 100
      if (heartRate > 100) {
        Blynk.logEvent("heart_rate_alert", "Heart rate is greater than 100 bpm.");
      }
    }
    if (validSPO2) {
      Blynk.virtualWrite(V1, spo2);  // Send SpO2 to Virtual Pin 1
    }
    
    // Send Gas Sensor Value to Blynk
    Blynk.virtualWrite(V2, gasValue); // Send gas value to Virtual Pin 2
    
    // Send Distance to Blynk
    Blynk.virtualWrite(V3, distance); // Send distance to Virtual Pin 3
    
    // Log event if distance > 15 cm
    if (distance > 15) {
      Blynk.logEvent("saline_alert", "Saline is about to be completed, please change the saline.");
    }
    
    tsLastReport = millis();
  }

  Blynk.run();
  delay(1000); // Delay for nextÂ measurement
}